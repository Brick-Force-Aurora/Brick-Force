{
  "fileName": "MatchStarter.cs",
  "filePath": "Assembly-CSharp\\MatchStarter.cs",
  "url": "https://github.com/TieHaxJan/Brick-Force/Assembly-CSharp\\MatchStarter.cs",
  "summary": "The `MatchStarter` class is responsible for managing the countdown and starting of a match in the Brick-Force project. It is a MonoBehaviour script in Unity, which means it can be attached to a game object in the scene and its methods will be automatically called by the engine.\n\nThe class has several fields and properties:\n- `guiDepth` is an enum that represents the depth of the GUI elements in the scene.\n- `countDigit` is an array of Texture2D objects that represent the digits used for the countdown.\n- `countDown` is a boolean flag that indicates whether the countdown is currently active.\n- `count` is an integer that represents the current count in the countdown.\n- `deltaTime` is a float that keeps track of the time elapsed since the last count change.\n- `waitBoxWidth` and `waitBoxHeight` are floats that determine the size of a GUI box used to display a waiting message.\n\nThe `Start` method is called when the script is first initialized. It sets the initial value of `count` to 0, and if the player is in the process of breaking into a room (`MyInfoManager.Instance.BreakingInto` is true), it sets `count` to the length of the `countDigit` array.\n\nThe `OnMatchCountDown` method is called when the server sends a match countdown event. It updates the `count` variable, sets the `countDown` flag based on whether the count is less than the length of the `countDigit` array, resets the `deltaTime` variable, and plays specific audio based on the count value.\n\nThe `OnGUI` method is responsible for rendering the GUI elements on the screen. It checks if the GUI is enabled (`MyInfoManager.Instance.isGuiOn` is true) and if the count is within the valid range of the `countDigit` array. If so, it sets the GUI skin, depth, and enables GUI interaction. It then checks if any BrickMan objects in the scene have a status of 2 or 3, and if so, it displays a waiting message in a GUI box. Otherwise, it displays the current count digit as a texture in the center of the screen.\n\nThe `Update` method is called every frame. It first checks if the local player is the master of the room (`RoomManager.Instance.Master == MyInfoManager.Instance.Seq`). If so, it checks if the countdown is active. If it is, it updates the `deltaTime` variable and increments the `count` every second. If the count reaches the length of the `countDigit` array, it stops the countdown, plays specific audio, and sends a network message to the server. If the count reaches the second-to-last digit, it also sends a network message to resume the room. If the countdown is not active and the count is less than or equal to 0, it checks if all BrickMan objects in the scene have a status of 2 or 3. If they do, it starts the countdown, plays specific audio, and sends a network message. If the local player is not the master and the count is at the second-to-last digit, it plays specific audio and stops the countdown.\n\nIn summary, the `MatchStarter` class manages the countdown and starting of a match in the Brick-Force project. It handles updating the count, displaying the countdown digits, playing audio, and sending network messages to synchronize the countdown across clients.",
  "questions": "1. What is the purpose of the `MatchStarter` class?\n- The `MatchStarter` class is responsible for managing the countdown and GUI display for starting a match in the game.\n\n2. What is the significance of the `countDigit` array?\n- The `countDigit` array contains a collection of textures representing the digits used for the countdown display.\n\n3. What triggers the countdown to start and stop?\n- The countdown starts when the `OnMatchCountDown` method is called with a non-zero count, and it stops when the count reaches the length of the `countDigit` array or when certain conditions are met in the `Update` method."
}