{
  "fileName": "BF_PeerHITBRICKMAN_NEW.cs",
  "filePath": "Assembly-CSharp\\BF_PeerHITBRICKMAN_NEW.cs",
  "url": "https://github.com/TieHaxJan/Brick-Force/Assembly-CSharp\\BF_PeerHITBRICKMAN_NEW.cs",
  "summary": "The code provided defines a struct called `BF_PeerHITBRICKMAN_NEW`. This struct is used to store information about a hit on a brickman in the Brick-Force project. \n\nThe struct has several properties: `slot`, `ammoId`, `damage`, `hitpart`, and `lucky`. Each property has a getter and a setter method that manipulate a bitvector called `bitvector1`. \n\nThe `slot` property represents the slot number of the brickman that was hit. It uses a bitwise AND operation to extract the 3 least significant bits from `bitvector1`. The setter method uses a bitwise OR operation to set the value of `slot` in `bitvector1`.\n\nThe `ammoId` property represents the ID of the ammunition used for the hit. It uses a bitwise AND operation to extract the 9 bits starting from the 4th least significant bit from `bitvector1`. The getter method then divides the extracted value by 8 to get the actual `ammoId`. The setter method multiplies the input value by 8 and uses a bitwise OR operation to set the value of `ammoId` in `bitvector1`.\n\nThe `damage` property represents the amount of damage caused by the hit. It uses a bitwise AND operation to extract the 20 bits starting from the 13th least significant bit from `bitvector1`. The getter method then divides the extracted value by 4096 to get the actual `damage`. The setter method multiplies the input value by 4096 and uses a bitwise OR operation to set the value of `damage` in `bitvector1`.\n\nThe `hitpart` property represents the part of the brickman that was hit. It uses a bitwise AND operation to extract the 3 bits starting from the 29th least significant bit from `bitvector1`. The getter method then divides the extracted value by 268435456 to get the actual `hitpart`. The setter method multiplies the input value by 268435456 and uses a bitwise OR operation to set the value of `hitpart` in `bitvector1`.\n\nThe `lucky` property represents whether the hit was lucky or not. It uses a bitwise AND operation to extract the most significant bit from `bitvector1`. The getter method then converts the extracted value to an unsigned integer by dividing it by 2147483648. The setter method multiplies the input value by -2147483648 and uses a bitwise OR operation to set the value of `lucky` in `bitvector1`.\n\nOverall, this struct provides a way to store and manipulate information about a hit on a brickman in the Brick-Force project. It allows for easy access and modification of the various properties related to the hit.",
  "questions": "1. What is the purpose of the `bitvector1` field in the `BF_PeerHITBRICKMAN_NEW` struct?\n- The `bitvector1` field is used to store multiple bit flags that represent different properties of the `BF_PeerHITBRICKMAN_NEW` struct.\n\n2. How is the `slot` property calculated and what does it represent?\n- The `slot` property is calculated by performing a bitwise AND operation between `bitvector1` and 7. It represents the slot number of the brick.\n\n3. What is the purpose of the `lucky` property and how is it calculated?\n- The `lucky` property represents a boolean value indicating whether the hit was lucky or not. It is calculated by performing a bitwise AND operation between `bitvector1` and -2147483648, and then dividing the result by 2147483648."
}