{
  "fileName": "P2PMsgBody.cs",
  "filePath": "Assembly-CSharp\\P2PMsgBody.cs",
  "url": "https://github.com/TieHaxJan/Brick-Force/Assembly-CSharp\\P2PMsgBody.cs",
  "summary": "The `P2PMsgBody` class in the `Brick-Force` project is responsible for handling the body of a peer-to-peer message. It provides methods for reading and writing different data types to and from a byte buffer.\n\nThe class has two private fields: `_offset` and `_buffer`. `_offset` keeps track of the current position in the buffer, while `_buffer` is an array of bytes that stores the message data.\n\nThe class provides several constructors. The default constructor initializes the `_offset` to 0 and creates a new byte array with a default size of 1024. Another constructor takes a source byte array, an offset, and a length as parameters. It copies the specified portion of the source array into the `_buffer` array.\n\nThe `ExpandBuffer` method is a private helper method that doubles the size of the `_buffer` array when it becomes full. It creates a new array with twice the length of the current buffer, copies the contents of the current buffer into the new array, and assigns the new array to `_buffer`.\n\nThe `Decrypt` method takes a key as a parameter and performs a bitwise XOR operation on each byte in the `_buffer` array with the key. This method is used to decrypt the message data.\n\nThe `Copy` method is another private helper method that copies a byte array into the `_buffer` array. If the length of the source array plus the current offset exceeds the length of the `_buffer` array, the `ExpandBuffer` method is called to increase the size of the buffer. The method then copies the source array into the `_buffer` array at the current offset and updates the offset accordingly.\n\nThe class also provides several `Write` methods for writing different data types to the buffer. These methods take a value of the respective data type as a parameter, convert it to a byte array using `BinaryWriter`, and then call the `Copy` method to copy the byte array into the `_buffer` array.\n\nSimilarly, the class provides several `Read` methods for reading different data types from the buffer. These methods read the respective number of bytes from the buffer using `BinaryReader` and update the offset accordingly. The read data is then converted to the respective data type and returned as an out parameter.\n\nFinally, the `GetFullPacketBuffer` method is used to construct a complete packet buffer for the message. It calculates a checksum byte by performing a bitwise XOR operation on each byte in the buffer, creates a new byte array with the appropriate size, and copies the message header and the buffer contents into the new array.\n\nOverall, the `P2PMsgBody` class provides functionality for handling the body of a peer-to-peer message, including encryption, reading and writing different data types, and constructing a complete packet buffer. It is likely used in the larger `Brick-Force` project for communication between peers.",
  "questions": "1. What is the purpose of the `P2PMsgBody` class?\n- The `P2PMsgBody` class is used to handle the body of a peer-to-peer message.\n\n2. What is the purpose of the `ExpandBuffer` method?\n- The `ExpandBuffer` method is used to increase the size of the `_buffer` array when it becomes full.\n\n3. What is the purpose of the `GetFullPacketBuffer` method?\n- The `GetFullPacketBuffer` method is used to construct a full packet buffer by combining the header and body of a peer-to-peer message."
}