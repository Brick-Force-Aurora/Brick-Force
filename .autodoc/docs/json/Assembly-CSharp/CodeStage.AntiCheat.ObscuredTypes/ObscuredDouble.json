{
  "fileName": "ObscuredDouble.cs",
  "filePath": "Assembly-CSharp\\CodeStage.AntiCheat.ObscuredTypes\\ObscuredDouble.cs",
  "url": "https://github.com/TieHaxJan/Brick-Force/Assembly-CSharp\\CodeStage.AntiCheat.ObscuredTypes\\ObscuredDouble.cs",
  "summary": "The code provided is a part of the Brick-Force project and it defines a struct called `ObscuredDouble` in the `CodeStage.AntiCheat.ObscuredTypes` namespace. This struct is used to store and manipulate double values in an obscured manner, making it difficult for cheaters to modify the values.\n\nThe `ObscuredDouble` struct implements the `IEquatable<ObscuredDouble>` interface, which allows for comparison of two `ObscuredDouble` instances.\n\nThe struct contains several private fields:\n- `cryptoKey`: a static long variable that represents the encryption key used to encrypt and decrypt the double values.\n- `currentCryptoKey`: a long variable that represents the current encryption key used for the instance.\n- `hiddenValue`: a byte array that stores the encrypted value of the double.\n- `fakeValue`: a double variable that stores the decrypted value of the double, used for cheating detection.\n- `inited`: a boolean variable that indicates whether the struct has been initialized.\n\nThe struct also contains a static `Action` delegate called `onCheatingDetected`, which can be used to handle cheating detection events.\n\nThe struct provides several methods and operators for encrypting, decrypting, and manipulating the double values:\n- `SetNewCryptoKey`: a static method that allows setting a new encryption key.\n- `GetEncrypted`: a method that returns the encrypted value of the double.\n- `SetEncrypted`: a method that sets the encrypted value of the double.\n- `Encrypt`: a static method that encrypts a double value using the current encryption key.\n- `Decrypt`: a static method that decrypts an encrypted value using the current encryption key.\n- `InternalEncrypt`: a private method that encrypts a double value using a specified encryption key.\n- `InternalDecrypt`: a private method that decrypts the encrypted value using the current encryption key.\n- `ToString`: overrides the `ToString` method to return the decrypted value as a string.\n- `Equals`: overrides the `Equals` method to compare two `ObscuredDouble` instances.\n- `GetHashCode`: overrides the `GetHashCode` method to return the hash code of the decrypted value.\n- `implicit operator`: provides implicit conversion between `ObscuredDouble` and double types.\n- `++` and `--` operators: increment and decrement the decrypted value by 1.\n\nOverall, this code provides a way to store and manipulate double values in an obscured manner, making it difficult for cheaters to modify the values. It also includes cheating detection functionality through the `onCheatingDetected` delegate. This struct can be used in the larger Brick-Force project to protect sensitive double values from cheating attempts.",
  "questions": "1. What is the purpose of the ObscuredDouble struct?\n- The ObscuredDouble struct is used to store and manipulate double values in an encrypted and obscured form.\n\n2. How does the encryption and decryption process work?\n- The encryption process involves XORing the double value with a crypto key, and then converting the resulting value into a byte array. The decryption process involves XORing the byte array with the crypto key and converting it back into a double value.\n\n3. What is the purpose of the onCheatingDetected action?\n- The onCheatingDetected action is triggered when a potential cheating attempt is detected. It is used to handle any actions or behaviors that should occur when cheating is detected."
}