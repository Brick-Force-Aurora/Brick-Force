{
  "fileName": "ObscuredQuaternion.cs",
  "filePath": "Assembly-CSharp\\CodeStage.AntiCheat.ObscuredTypes\\ObscuredQuaternion.cs",
  "url": "https://github.com/TieHaxJan/Brick-Force/Assembly-CSharp\\CodeStage.AntiCheat.ObscuredTypes\\ObscuredQuaternion.cs",
  "summary": "The code provided is a part of the Brick-Force project and is used to implement an obscured version of the Quaternion data type in Unity. \n\nThe ObscuredQuaternion struct is defined with several private fields and methods. It has a hiddenValue field of type Quaternion, which stores the actual value of the quaternion. It also has a fakeValue field of type Quaternion, which is used to store a fake value in case cheating is detected. The inited field is a boolean flag that indicates whether the struct has been initialized or not. \n\nThe struct has a constructor that takes a Quaternion value and initializes the hiddenValue field with the provided value. It also sets the currentCryptoKey to the default cryptoKey value and sets the fakeValue to Quaternion.identity. \n\nThe struct has several public methods. The SetNewCryptoKey method allows the user to set a new cryptoKey value. The GetEncrypted method returns the encrypted value of the hiddenValue field. If the currentCryptoKey is different from the cryptoKey, it decrypts the hiddenValue and encrypts it again with the new cryptoKey. The SetEncrypted method sets the hiddenValue field to the provided encrypted value. If cheating is detected (onCheatingDetected is not null), it sets the fakeValue field to the decrypted hiddenValue. \n\nThe struct also has static methods for encrypting and decrypting Quaternion values. The Encrypt method takes a Quaternion value and encrypts each component using the ObscuredDouble.Encrypt method. The Decrypt method does the opposite, decrypting each component of the Quaternion value. \n\nThe InternalDecrypt method is a private method that decrypts the hiddenValue field. If the struct has not been initialized, it initializes it with default values. It then decrypts each component of the hiddenValue using the ObscuredDouble.Decrypt method. If cheating is detected and the fakeValue is not Quaternion.identity and the decrypted value is not equal to the fakeValue, it calls the onCheatingDetected method and sets it to null. \n\nThe struct also overrides the GetHashCode, ToString, and ToString(string format) methods to provide the decrypted value of the hiddenValue field. \n\nThe struct provides implicit conversion operators to convert between ObscuredQuaternion and Quaternion types. The implicit operator from Quaternion to ObscuredQuaternion encrypts the provided Quaternion value and sets the fakeValue field if cheating is detected. The implicit operator from ObscuredQuaternion to Quaternion decrypts the hiddenValue field and returns the decrypted value. \n\nOverall, this code provides a way to store and manipulate Quaternion values in an obscured manner to prevent cheating in the Brick-Force project.",
  "questions": "1. What is the purpose of the `ObscuredQuaternion` struct?\n- The `ObscuredQuaternion` struct is used to store and manipulate quaternion values in an encrypted form.\n\n2. How does the encryption work for the `ObscuredQuaternion` struct?\n- The encryption for the `ObscuredQuaternion` struct is done using a crypto key. The `Encrypt` method encrypts the quaternion values using the crypto key, and the `Decrypt` method decrypts the encrypted values using the same crypto key.\n\n3. What is the purpose of the `fakeValue` field in the `ObscuredQuaternion` struct?\n- The `fakeValue` field is used to store the decrypted value of the quaternion if cheating is detected. It is compared with the decrypted value to check for cheating."
}