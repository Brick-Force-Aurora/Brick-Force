{
  "fileName": "ObscuredVector2.cs",
  "filePath": "Assembly-CSharp\\CodeStage.AntiCheat.ObscuredTypes\\ObscuredVector2.cs",
  "url": "https://github.com/TieHaxJan/Brick-Force/Assembly-CSharp\\CodeStage.AntiCheat.ObscuredTypes\\ObscuredVector2.cs",
  "summary": "The code provided is a struct called `ObscuredVector2` that is used to encrypt and decrypt Vector2 values. It is part of a larger project called Brick-Force and is located in the `CodeStage.AntiCheat.ObscuredTypes` namespace.\n\nThe purpose of this code is to provide a way to store Vector2 values in an encrypted form, making it difficult for users to manipulate or cheat with these values. It achieves this by using a cryptoKey to encrypt and decrypt the values.\n\nThe struct has several properties and methods that allow for encryption and decryption of Vector2 values. The `x` and `y` properties are used to get and set the encrypted values of the x and y components of the Vector2. When getting the values, the code checks for cheating by comparing the decrypted value with a fake value. If the difference between the decrypted value and the fake value is greater than a threshold, a cheating detection event is triggered. When setting the values, the code updates the hiddenValue with the encrypted value and sets the fakeValue if cheating detection is enabled.\n\nThe struct also provides methods to get and set the encrypted Vector2 value as a whole. The `GetEncrypted` method checks if the cryptoKey has changed and updates the hiddenValue if necessary. The `SetEncrypted` method sets the hiddenValue and updates the fakeValue if cheating detection is enabled.\n\nAdditionally, the struct provides static methods to encrypt and decrypt Vector2 values. The `Encrypt` method encrypts a Vector2 value using the cryptoKey, and the `Decrypt` method decrypts a Vector2 value using the cryptoKey.\n\nThe struct also includes private methods for internal encryption and decryption of the Vector2 values. These methods are used internally by the struct to perform the encryption and decryption operations.\n\nOverall, this code provides a way to store and manipulate Vector2 values in an encrypted form, making it more difficult for users to cheat or manipulate these values in the Brick-Force project.",
  "questions": "1. What is the purpose of the `ObscuredVector2` struct?\n- The `ObscuredVector2` struct is used to store and manipulate encrypted Vector2 values.\n\n2. How does the encryption and decryption process work for the `ObscuredVector2` struct?\n- The encryption process uses a crypto key to encrypt the x and y values of the Vector2 using the `ObscuredDouble.Encrypt` method. The decryption process uses the same crypto key to decrypt the encrypted values using the `ObscuredDouble.Decrypt` method.\n\n3. What is the purpose of the `onCheatingDetected` action and how is it used?\n- The `onCheatingDetected` action is used to detect cheating in the values of the `ObscuredVector2`. If the `fakeValue` is not equal to (0,0) and the difference between the decrypted value and the `fakeValue` is greater than 0.0005f, the `onCheatingDetected` action is invoked."
}