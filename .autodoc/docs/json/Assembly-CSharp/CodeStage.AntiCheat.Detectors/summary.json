{
  "folderName": "CodeStage.AntiCheat.Detectors",
  "folderPath": ".autodoc\\docs\\json\\Assembly-CSharp\\CodeStage.AntiCheat.Detectors",
  "url": "https://github.com/TieHaxJan/Brick-Force/.autodoc\\docs\\json\\Assembly-CSharp\\CodeStage.AntiCheat.Detectors",
  "files": [
    {
      "fileName": "InjectionDetector.cs",
      "filePath": "Assembly-CSharp\\CodeStage.AntiCheat.Detectors\\InjectionDetector.cs",
      "url": "https://github.com/TieHaxJan/Brick-Force/Assembly-CSharp\\CodeStage.AntiCheat.Detectors\\InjectionDetector.cs",
      "summary": "The code provided is a part of the Brick-Force project and is responsible for detecting code injection in the game. The InjectionDetector class is a MonoBehaviour that can be attached to a GameObject in the Unity scene. \n\nThe purpose of this code is to monitor the game for any unauthorized code injection attempts. It does this by checking the assemblies that are currently loaded in the game and comparing them to a list of allowed assemblies. If an assembly is found that is not in the allowed list, it triggers the onInjectionDetected callback and takes appropriate action.\n\nThe code starts by defining a private class called AllowedAssembly, which represents an assembly that is allowed to be loaded in the game. It has two properties: name, which is the name of the assembly, and hashes, which is an array of integer hashes representing the assembly.\n\nThe InjectionDetector class has several public properties and methods that can be used to control its behavior. The autoDispose property determines whether the InjectionDetector GameObject should be automatically destroyed when an injection is detected. The keepAlive property determines whether the InjectionDetector should be kept alive when a new level is loaded. The onInjectionDetected property is a callback that is triggered when an injection is detected.\n\nThe code also defines a static instance of the InjectionDetector class, which can be accessed through the Instance property. This ensures that there is only one instance of the InjectionDetector in the game.\n\nThe code provides methods for starting and stopping the detection process. The StartDetection method starts the detection process by checking the currently loaded assemblies and comparing them to the allowed assemblies. If an unauthorized assembly is found, it triggers the onInjectionDetected callback. The StopMonitoring method stops the detection process by removing the event handler for new assembly loads.\n\nThe code also includes several private methods that are used internally. The Awake method checks if there is already an instance of the InjectionDetector and destroys itself if there is. It also checks if the InjectionDetector is placed correctly in the scene. The OnLevelWasLoaded method is called when a new level is loaded and disposes of the InjectionDetector if the keepAlive property is set to false. The OnDisable method stops the detection process when the InjectionDetector is disabled. The OnApplicationQuit method disposes of the InjectionDetector when the application is quit.\n\nThe LoadAndParseAllowedAssemblies method is responsible for loading and parsing the allowed assemblies from a text asset. It reads the text asset as a binary stream and decrypts the values using the ObscuredString.EncryptDecrypt method. It then splits the values into an array and creates an AllowedAssembly object for each value. The GetAssemblyHash method calculates a hash value for an assembly based on its name and public key token. The PublicKeyTokenToString method converts a byte array representing the public key token to a string.\n\nIn summary, the InjectionDetector class is a component that can be attached to a GameObject in the Unity scene to detect code injection attempts in the game. It monitors the currently loaded assemblies and compares them to a list of allowed assemblies. If an unauthorized assembly is found, it triggers a callback and takes appropriate action.",
      "questions": "1. What is the purpose of the `InjectionDetector` class?\n- The `InjectionDetector` class is used to detect injection of unauthorized assemblies into the project.\n\n2. How does the `InjectionDetector` class determine if an assembly is allowed or not?\n- The `InjectionDetector` class checks the name and hash of the loaded assembly against a list of allowed assemblies and their corresponding hashes.\n\n3. What happens when an injection is detected?\n- When an injection is detected, the `InjectionDetected` method is called, which triggers the `onInjectionDetected` callback if it is not null. If `autoDispose` is true, the `Dispose` method is called to destroy the `InjectionDetector` instance. Otherwise, the `StopMonitoringInternal` method is called to stop the detection process."
    },
    {
      "fileName": "SpeedHackDetector.cs",
      "filePath": "Assembly-CSharp\\CodeStage.AntiCheat.Detectors\\SpeedHackDetector.cs",
      "url": "https://github.com/TieHaxJan/Brick-Force/Assembly-CSharp\\CodeStage.AntiCheat.Detectors\\SpeedHackDetector.cs",
      "summary": "The code provided is a part of the Brick-Force project and is a script for detecting speed hacks in the game. The purpose of this code is to monitor the player's movement speed and detect if they are using any speed hacks or cheats.\n\nThe `SpeedHackDetector` class is a MonoBehaviour script that is attached to a game object in the scene. It contains various properties and methods for detecting speed hacks.\n\nThe `Instance` property is a singleton instance of the `SpeedHackDetector` class. It ensures that only one instance of the detector exists in the scene. If an instance does not exist, it creates a new game object with the `SpeedHackDetector` component attached.\n\nThe `Dispose` method is used to dispose of the `SpeedHackDetector` instance. It stops the monitoring process, destroys the game object, and sets the instance to null.\n\nThe `Awake` method is called when the script is initialized. It checks if the `SpeedHackDetector` is placed correctly in the scene. If not, it displays a warning message and destroys the script.\n\nThe `OnLevelWasLoaded` method is called when a new level is loaded. If the `keepAlive` property is set to false, it disposes of the `SpeedHackDetector` instance.\n\nThe `OnDisable` method is called when the script is disabled. It stops the monitoring process.\n\nThe `OnApplicationQuit` method is called when the application is about to quit. It disposes of the `SpeedHackDetector` instance.\n\nThe `StartDetection` method is used to start the speed hack detection process. It takes a callback function, a check interval, and the maximum number of false positives as parameters. It sets the callback function, check interval, and maximum false positives properties of the `SpeedHackDetector` instance. It also sets the start time and starts a repeating timer that calls the `OnTimer` method.\n\nThe `StopMonitoring` method is used to stop the speed hack detection process. It cancels the repeating timer and sets the callback function to null.\n\nThe `OnTimer` method is called by the repeating timer. It calculates the current time and checks if the player's movement speed exceeds a threshold value. If it does, it increments the error count and displays a warning message. If the error count exceeds the maximum false positives, it calls the callback function and disposes of the `SpeedHackDetector` instance.\n\nOverall, this code provides a way to detect speed hacks in the game and take appropriate actions when a speed hack is detected. It can be used as a part of a larger anti-cheat system in the Brick-Force project to ensure fair gameplay.",
      "questions": "1. What does this code do?\n   - This code is a Speed Hack Detector component in the Brick-Force project that detects if a player is using a speed hack cheat in the game.\n\n2. How does the Speed Hack Detector work?\n   - The Speed Hack Detector calculates the difference between the current time and the time when the game started, and compares it to the difference between the current system tick count and the tick count when the game started. If the difference exceeds a threshold of 5000000, it considers it a speed hack detection.\n\n3. How can the Speed Hack Detector be used in the project?\n   - The Speed Hack Detector can be used by calling the `StartDetection` method with a callback function to be executed when a speed hack is detected. The detection interval and maximum allowed false positives can also be specified. The detector can be stopped using the `StopMonitoring` method."
    }
  ],
  "folders": [],
  "summary": "The `InjectionDetector.cs` and `SpeedHackDetector.cs` files are part of the anti-cheat system in the Brick-Force project. They are designed to detect and respond to unauthorized code injections and speed hacks respectively.\n\n`InjectionDetector.cs` is a MonoBehaviour script that can be attached to a GameObject in the Unity scene. It monitors the game for unauthorized code injection attempts by comparing the currently loaded assemblies to a list of allowed assemblies. If an unauthorized assembly is found, it triggers the `onInjectionDetected` callback and takes appropriate action. This class also provides methods for starting and stopping the detection process. For example, to start the detection process, you would call `InjectionDetector.Instance.StartDetection()`.\n\n`SpeedHackDetector.cs` is another MonoBehaviour script that can be attached to a GameObject in the Unity scene. It monitors the player's movement speed and detects if they are using any speed hacks or cheats. If a speed hack is detected, it triggers a callback function and disposes of the `SpeedHackDetector` instance. To start the speed hack detection process, you would call `SpeedHackDetector.Instance.StartDetection(callback, checkInterval, maxFalsePositives)`.\n\nThese scripts can be used in conjunction with other parts of the anti-cheat system to ensure fair gameplay. For example, they could be used alongside a wall hack detector or an aimbot detector. They could also be used in combination with a system that bans or penalizes players who are detected using cheats. \n\nHere is an example of how you might use these scripts in your game:\n\n```csharp\n// Attach the InjectionDetector and SpeedHackDetector to a GameObject\nInjectionDetector injectionDetector = gameObject.AddComponent<InjectionDetector>();\nSpeedHackDetector speedHackDetector = gameObject.AddComponent<SpeedHackDetector>();\n\n// Start the detection processes\ninjectionDetector.StartDetection();\nspeedHackDetector.StartDetection(OnSpeedHackDetected, 1.0f, 3);\n\n// Define the callback function for when a speed hack is detected\nvoid OnSpeedHackDetected()\n{\n    // Take appropriate action, such as banning the player or displaying a warning message\n}\n```\n\nIn summary, `InjectionDetector.cs` and `SpeedHackDetector.cs` are key components of the anti-cheat system in the Brick-Force project. They provide a way to detect and respond to code injections and speed hacks, helping to ensure fair gameplay.",
  "questions": ""
}