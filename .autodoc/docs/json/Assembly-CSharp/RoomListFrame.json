{
  "fileName": "RoomListFrame.cs",
  "filePath": "Assembly-CSharp\\RoomListFrame.cs",
  "url": "https://github.com/TieHaxJan/Brick-Force/Assembly-CSharp\\RoomListFrame.cs",
  "summary": "The code provided is a class called `RoomListFrame` that is used to display a list of rooms in a graphical user interface (GUI) for the Brick-Force project. The purpose of this code is to create and manage the visual representation of the room list, including buttons, labels, and icons.\n\nThe `RoomListFrame` class contains various fields that define the positions and sizes of different GUI elements, such as buttons and labels. These fields are used to calculate the positions of the elements in the GUI.\n\nThe `Start` method initializes an array of `Texture2D` objects called `modeIcon` with references to different icons used for different room modes. It also finds the `StreamedLevelLoadibilityChecker` component attached to a game object named \"Main\" and assigns it to the `sll` field.\n\nThe `Update` method does not perform any actions and is empty.\n\nThe `OnGUI` method is responsible for rendering the GUI elements and handling user interactions. It starts by drawing a box using the `GUI.Box` method, which creates a rectangular area with a background texture.\n\nNext, it creates two buttons: \"QUICK_JOIN\" and \"CREATE_ROOM\". When the \"QUICK_JOIN\" button is clicked, it checks if the `sll` object is not null and if the streamed level can be loaded. If these conditions are met, it displays a message box with the text \"STREAMING_WAIT\". Otherwise, it sends a quick join request to the server. When the \"CREATE_ROOM\" button is clicked, it checks if the `sll` object is not null and if the streamed level can be loaded. If these conditions are met, it displays a message box with the text \"STREAMING_WAIT\". Otherwise, it opens a dialog box to create a new room.\n\nThe method then creates buttons for sorting the room list by different columns, such as room number, room map, room title, room type, room status, and number of players. When a button is clicked, it updates the `sortedBy` field and toggles the `ascending` field.\n\nAfter that, it creates a scrollable view using the `GUI.BeginScrollView` method. Inside the scroll view, it iterates over a list of rooms and renders the room information, such as room number, map alias, title, type, status, and number of players. It also checks if the room is locked and displays a lock icon if it is. When a room button is clicked, it sets the `num` variable to the room number.\n\nFinally, it ends the scroll view using the `GUI.EndScrollView` method. If the `num` variable is greater than or equal to 0, it checks if the streamed level can be loaded. If it can't, it displays a message box with the text \"STREAMING_WAIT\". Otherwise, it retrieves the room object with the corresponding room number and checks if it is locked. If it is, it opens a password dialog box. If it is not locked, it sends a join request to the server.\n\nIn summary, this code is responsible for creating and managing the visual representation of the room list in the Brick-Force project. It handles user interactions, such as clicking buttons and scrolling, and communicates with the server to perform actions like joining a room or creating a new room.",
  "questions": "1. What is the purpose of the `Start()` method and what does it do?\n- The `Start()` method initializes the `modeIcon` array with texture assets and assigns the `StreamedLevelLoadibilityChecker` component to the `sll` variable if it exists in the scene.\n\n2. What is the purpose of the `Update()` method and what does it do?\n- The `Update()` method currently does nothing as it only contains an `if` statement that is never true (`if (!once)`).\n\n3. What is the purpose of the `OnGUI()` method and what does it do?\n- The `OnGUI()` method is responsible for rendering the graphical user interface (GUI) elements for the room list. It creates buttons, labels, and textures based on the data stored in the `RoomListFrame` class."
}