{
  "fileName": "MonDesc.cs",
  "filePath": "Assembly-CSharp\\MonDesc.cs",
  "url": "https://github.com/TieHaxJan/Brick-Force/Assembly-CSharp\\MonDesc.cs",
  "summary": "The code provided is a class called `MonDesc` that represents a monster description in the Brick-Force project. This class contains various properties and methods that are used to manage and track information about a monster.\n\nThe purpose of this class is to store and manipulate data related to a monster's attributes, such as its movement speed, attack damage, experience points, and damage logs. It also includes methods for initializing and updating the monster's data.\n\nHere is a breakdown of the important elements in the code:\n\n- Properties:\n  - `bP2P`: A boolean flag indicating whether the monster is a player-to-player monster.\n  - `timerRebirth`: A float value representing the time it takes for the monster to respawn.\n  - `atkedSeq`: An integer representing the sequence number of the monster that attacked.\n  - `moveSpeed`: A float value representing the movement speed of the monster.\n  - `shootDelay`: A float value representing the delay between monster's attacks.\n  - `typeID`: An integer representing the type ID of the monster.\n  - `tblID`: An integer representing the table ID of the monster.\n  - `dicDamageLog`: A dictionary that stores the damage inflicted on the monster by different attackers.\n  - `dicInflictedDamage`: A dictionary that stores the damage inflicted by the monster on different targets.\n  - `rigidity`: A float value representing the rigidity of the monster.\n  - `bRedTeam`: A boolean flag indicating whether the monster belongs to the red team.\n  - `Dp`: An integer representing the damage points of the monster.\n  - `seq`: An integer representing the sequence number of the monster.\n  - `bHalfDamage`: A boolean flag indicating whether the monster deals half damage.\n  - `max_xp`: An integer representing the maximum experience points of the monster.\n  - `xp`: An integer representing the current experience points of the monster.\n  - `aiAtkWho`: An integer representing the AI attacker of the monster.\n  - `deltaTimeInflictedDamage`: A float value representing the time since the last inflicted damage.\n  - `IsHit`: A boolean flag indicating whether the monster is hit.\n  - `colHit`: A boolean flag indicating whether the monster is hit by a collision.\n  - `coreToDmg`: An integer representing the damage to the monster's core.\n  - `Seq`: A read-only property that returns the sequence number of the monster.\n  - `Xp`: A property that gets or sets the experience points of the monster.\n  - `AiAtkWho`: A property that gets or sets the AI attacker of the monster.\n\n- Constructor:\n  - `MonDesc(int _tbl, int _typeID, int _seq, int _xp, bool _bP2P, int _dp)`: Initializes a new instance of the `MonDesc` class with the specified parameters. It sets the values of the properties based on the provided arguments.\n\n- Methods:\n  - `isSmoke()`: Checks if the monster is considered as \"smoke\" based on its current experience points and maximum experience points. It returns `true` if the monster's experience points are less than 30% of its maximum experience points, and `false` otherwise.\n  - `ResetGameStuff()`: Resets the game-related properties of the monster. This method does not have any implementation.\n  - `IsHostile()`: Determines if the monster is hostile. It always returns `true`.\n  - `InitLog()`: Initializes the damage log dictionaries (`dicDamageLog` and `dicInflictedDamage`) if they are null.\n  - `LogAttacker(int shooter, int damage)`: Logs the attacker and the damage inflicted by the attacker on the monster. It updates the damage log dictionaries with the new damage values.\n  - `ReportInflictedDamage()`: Reports the inflicted damage to the server. It sends the `dicInflictedDamage` dictionary to the server if it is not null and contains any entries. This method is called periodically to send the inflicted damage data to the server.\n  - `clearLog()`: Clears the damage log dictionaries (`dicDamageLog` and `dicInflictedDamage`).\n\nIn the larger Brick-Force project, this `MonDesc` class is likely used to manage and track the attributes and behavior of monsters. It provides methods for updating and reporting damage, initializing data structures, and managing game-related properties. Other classes in the project may interact with instances of this class to retrieve or modify monster data.",
  "questions": "1. What is the purpose of the `MonDesc` class?\n- The `MonDesc` class represents a description of a monster in the game. It stores various properties and methods related to the monster.\n\n2. What is the significance of the `seq` variable?\n- The `seq` variable represents the sequence number of the monster. It is used to determine if the monster belongs to the red team or not.\n\n3. What is the purpose of the `LogAttacker` method?\n- The `LogAttacker` method is used to log the damage inflicted by an attacker on the monster. It updates the `dicDamageLog` and `dicInflictedDamage` dictionaries with the damage information."
}