{
  "fileName": "TeamMatch.cs",
  "filePath": "Assembly-CSharp\\TeamMatch.cs",
  "url": "https://github.com/TieHaxJan/Brick-Force/Assembly-CSharp\\TeamMatch.cs",
  "summary": "The `TeamMatch` class is a script that is part of the larger Brick-Force project. This script is responsible for managing the gameplay mechanics and functionality related to team matches in the game.\n\nThe `InitializeFirstPerson` method is called to initialize the first-person perspective for the player. It retrieves the weapon options chosen by the player and initializes the player's equipment accordingly. It also retrieves the `EquipCoordinator` component attached to the player's game object and initializes it with the chosen weapon options. Additionally, it retrieves the `LocalController` component attached to the player's game object.\n\nThe `OnLoadComplete` method is called when the game finishes loading. It first loads the train manager and then retrieves the spawner for the player's team from the `BrickManager` instance. If a spawner is found, it spawns the player at the spawner's position and rotation. Otherwise, it spawns the player at a random spawn position with a random rotation. It then checks if the player has enabled the battle guide dialog and if it hasn't been shown before. If both conditions are met, it shows the battle guide dialog.\n\nThe `Start` method is called when the game starts. It clears all dropped weapons, applies the audio source settings, and disables the flashbang effect. It then calls the `InitializeFirstPerson` method to initialize the first-person perspective. It retrieves the `BattleChat` component attached to the game object and initializes it. It also calls the `OnStart` method of the `BrickManManager` instance and sets up the camera for visual effects optimization.\n\nThe `StartLoad` method is called to start loading the game. It first collects garbage to free up memory. It then creates a new `UserMap` instance and tries to load the current map from the `RoomManager` instance. If the map is successfully loaded, it sets the `userMap` property of the `BrickManager` instance to the loaded map. Otherwise, it sets the `userMap` property to a new empty `UserMap` instance and sends a cache brick request to the server.\n\nThe `ResetGameStuff` method is called to reset various game-related data and components. It resets the game stuff for the wanted manager, the player's info manager, and the train manager. It also resets the game stuff for all brick men in the `BrickManManager` instance.\n\nThe `Awake` method is empty and does not contain any code.\n\nThe `OnDisable` method is called when the script is disabled. If the game is still loading a level, it resets the game stuff, unlocks the cursor, and clears the `BrickManager` instance.\n\nThe `OnGUI` method is called to handle the graphical user interface. It sets the GUI skin to the one retrieved from the `GUISkinFinder` instance.\n\nThe `Update` method is called every frame to update the game logic. It first checks if the connecting component is showing, and if it is, it sets a flag to true. It then locks the cursor if certain conditions are met (the game is not loading a level, the player is not chatting, there are no modal dialogs, and the connecting component is not showing). \n\nIf the `delayLoad` flag is true, it increments the `deltaTime` variable by the time since the last frame. If `deltaTime` exceeds 1 second, it sets `delayLoad` to false and calls the `StartLoad` method.\n\nIf `delayLoad` is false and the game is not loading a level, it checks for various input conditions. If the player presses the main menu button and certain conditions are met, it shows the menu dialog. If the player presses the help button and certain conditions are met, it shows the help window dialog. It also updates the flashbang effect.\n\nOverall, this script manages the initialization, loading, resetting, and updating of game-related components and functionality for team matches in the Brick-Force game.",
  "questions": "1. What is the purpose of the `InitializeFirstPerson()` method?\n- The `InitializeFirstPerson()` method is responsible for initializing the equipment and local controller components for the player character in the first-person perspective.\n\n2. What does the `OnLoadComplete()` method do?\n- The `OnLoadComplete()` method loads the train manager, gets the spawner for the player's team, and spawns the player character at the appropriate position and rotation.\n\n3. What is the significance of the `StartLoad()` method?\n- The `StartLoad()` method is responsible for loading the user map for the current game session. If the map fails to load, it sends a request to the server to cache the brick data."
}