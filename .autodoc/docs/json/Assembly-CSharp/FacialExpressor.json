{
  "fileName": "FacialExpressor.cs",
  "filePath": "Assembly-CSharp\\FacialExpressor.cs",
  "url": "https://github.com/TieHaxJan/Brick-Force/Assembly-CSharp\\FacialExpressor.cs",
  "summary": "The code provided is a part of the Brick-Force project and is a script called \"FacialExpressor\". This script is responsible for managing facial expressions for a character in the game. \n\nThe script starts by defining an enumeration called \"EXPRESSION\" which lists various facial expressions that the character can have. These expressions include DEFAULT, ANGRY, CRY, DEATH, DIZZY, FEAR, LAUGH, LOSS, LOVE, NONSENSE, RAGE, SHOUT, SHY, SIGH, and SURPRISED.\n\nThe script also has a reference to a SkinnedMeshRenderer component called \"smrFace\" which is used to render the character's face. It also has an array of \"ExpressionSet\" objects called \"expression\". Each \"ExpressionSet\" object represents a set of materials for different facial expressions.\n\nThe script has a private variable called \"curExpression\" which represents the current facial expression of the character. It also has a private variable called \"curExprSet\" which represents the current set of materials for the character's facial expression.\n\nThe script has a method called \"ChangeFace\" which takes a SkinnedMeshRenderer component and a string as parameters. This method is used to change the character's facial expression by setting the appropriate materials on the SkinnedMeshRenderer component. It searches for the ExpressionSet object with the given name in the \"expression\" array and sets it as the current expression set. If the expression set is not found, it logs an error message. Finally, it sets the current expression to the DEFAULT expression and updates the materials on the SkinnedMeshRenderer component.\n\nThe script also has several private methods. The \"OnFeel\" method is called when the character feels a certain expression. It calls the \"SetExpression\" method to update the current expression.\n\nThe \"SetExpression\" method is responsible for setting the current expression. It converts the given expression to a zombie expression if certain conditions are met. It then updates the materials on the SkinnedMeshRenderer component.\n\nThe \"VerifyPlayerProperty\" method is used to check if the \"pp\" (PlayerProperty) variable is null and assigns it if it is.\n\nThe \"ConvertExpression4Zombie\" method is used to convert the given expression to a zombie expression if certain conditions are met. It checks if the game is in zombie mode, the current room type is zombie, the player property is not null, and the player is a zombie. If all conditions are met, it converts the expression to a zombie expression using the \"zombieExpression\" array.\n\nIn summary, this script is responsible for managing facial expressions for a character in the game. It allows for changing the character's facial expression by setting the appropriate materials on a SkinnedMeshRenderer component. It also has functionality to convert expressions to zombie expressions in certain conditions.",
  "questions": "1. What is the purpose of the `FacialExpressor` class?\n- The `FacialExpressor` class is responsible for changing the facial expression of a character in the game.\n\n2. What is the purpose of the `expression` array?\n- The `expression` array stores different sets of facial expressions that can be applied to the character.\n\n3. What is the significance of the `ConvertExpression4Zombie` method?\n- The `ConvertExpression4Zombie` method converts the given expression to a different expression if certain conditions are met, such as if the game mode is set to \"Zombie\" and the character is a zombie."
}