{
  "fileName": "NmSecure.cs",
  "filePath": "Assembly-CSharp\\NmSecure.cs",
  "url": "https://github.com/TieHaxJan/Brick-Force/Assembly-CSharp\\NmSecure.cs",
  "summary": "The code provided is a part of the Brick-Force project and is contained in the `NmSecure` class. The purpose of this code is to provide a secure way to handle and manipulate sensitive data within the project. It achieves this by using external functions from a native library called \"nmsv\" through the use of platform invocation services.\n\nThe `NmSecure` class is a singleton, meaning that there can only be one instance of it in the project. The `Instance` property provides access to this instance. If there is no existing instance, it tries to find one using `Object.FindObjectOfType`. If it fails to find an instance, it logs an error message.\n\nThe class also contains a number of external function declarations using the `DllImport` attribute. These functions are used to interact with the native library and perform various operations on the sensitive data. Some of the operations include setting and getting values of different types (integer, long, float, double), as well as adding and subtracting values.\n\nThe class also includes a callback function called `FalsificationNotifyCallback`, which is used to handle cases where the data is falsified. In this case, it logs an error message and calls the `HardExit` method from the `BuildOption` class.\n\nThe `Awake` method is called when the script instance is being loaded. It checks if the platform is Windows and if so, it sets the falsification notify callback using the `setntcb` function.\n\nThe `Main` method is a static method that is called when the script is run. It sets the falsification notify callback, creates multiple handles using the `ctsvar` function, sets the values of these handles, and performs various operations on them. Finally, it logs the results of these operations.\n\nOverall, this code provides a secure way to handle sensitive data within the Brick-Force project by using external functions from a native library. It ensures that the data is not falsified and provides methods to manipulate and retrieve the data as needed.",
  "questions": "1. What is the purpose of the `NmSecure` class?\n- The `NmSecure` class is responsible for handling secure data and preventing falsification.\n\n2. What is the purpose of the `setntcb` method and how is it used?\n- The `setntcb` method is used to set a callback function that will be called when data falsification is detected. It is used to notify the program when secure data has been tampered with.\n\n3. What is the purpose of the `ctsvar` method and how is it used?\n- The `ctsvar` method is used to create a secure variable of a specified type. It returns a handle that can be used to access and manipulate the secure variable."
}