{
  "fileName": "UserMapInfo.cs",
  "filePath": "Assembly-CSharp\\UserMapInfo.cs",
  "url": "https://github.com/TieHaxJan/Brick-Force/Assembly-CSharp\\UserMapInfo.cs",
  "summary": "The code provided is a class called `UserMapInfo` that represents information about a user-created map in the Brick-Force project. This class is responsible for storing and managing various properties of a user map, such as its slot number, alias, brick count, last modified date, premium status, and thumbnail image.\n\nThe `UserMapInfo` class has several properties and methods that allow for the retrieval and manipulation of these properties. \n\nThe `Thumbnail` property is a getter and setter for the thumbnail image of the map. If the `regMap` (a reference to a `RegMap` object) has a non-null thumbnail, it is returned. Otherwise, if the `thumbnail` property is null and the `alias` property has a length greater than 0 and the `lastModified` property has a year greater than 1971, the `ThumbnailDownloader` class is used to enqueue a download of the thumbnail image. The `Thumbnail` property returns the `thumbnail` property.\n\nThe `Slot` property is a getter that returns the `slot` property.\n\nThe `Alias` property is a getter and setter for the `alias` property.\n\nThe `BrickCount` property is a getter and setter for the `brickCount` property.\n\nThe `LastModified` property is a getter and setter for the `lastModified` property.\n\nThe `IsPremium` property is a getter that returns a boolean indicating whether the map is premium based on the `premium` property.\n\nThe `Premium` property is a getter and setter for the `premium` property.\n\nThe `UserMapInfo` class has two constructors. The first constructor takes a slot number and premium status as parameters and initializes the `slot`, `alias`, and `premium` properties. If the slot number is greater than 0, it assigns the corresponding `RegMap` object to the `regMap` property using the `AssignRegMap` method.\n\nThe second constructor takes a slot number, alias, brick count, last modified date, and premium status as parameters and initializes all the corresponding properties. If the slot number is greater than 0, it assigns the corresponding `RegMap` object to the `regMap` property using the `AssignRegMap` method.\n\nThe `AssignRegMap` method is used to assign a `RegMap` object to the `regMap` property.\n\nThe `VerifySavedData` method checks if the `alias` property has a length greater than 0, the `thumbnail` property is null, and the `lastModified` property has a year less than or equal to 1971. If these conditions are met, it resets the `alias` property to an empty string and sets the `brickCount` property to 0.\n\nThe `LoadCache` method attempts to load cached data for the map. It checks if the cache directory exists and if the cache file exists. If both conditions are met, it calls the `Load` method to load the data from the cache file.\n\nThe `SaveCache` method attempts to save the map data to the cache. It checks if the cache directory exists and if it doesn't, it creates it. Then it calls the `Save` method to save the data to the cache file.\n\nThe `Save` method is a private method that takes a file name as a parameter and attempts to save the map data to the specified file. It opens the file in write mode, creates a `BinaryWriter` object, and writes the various properties of the map to the file. If an exception occurs during the process, it logs an error message and returns false. Otherwise, it returns true.\n\nThe `Load` method is a private method that takes a file name as a parameter and attempts to load the map data from the specified file. It opens the file in read mode, creates a `BinaryReader` object, and reads the various properties of the map from the file. If an exception occurs during the process, it logs an error message and returns false. Otherwise, it returns true.\n\nIn summary, the `UserMapInfo` class is responsible for storing and managing information about a user-created map in the Brick-Force project. It provides methods for loading and saving map data to a cache, as well as properties for accessing and modifying the map's properties.",
  "questions": "1. What is the purpose of the `UserMapInfo` class?\n- The `UserMapInfo` class is used to store information about a user-created map, such as its slot, alias, brick count, last modified date, premium status, and thumbnail.\n\n2. What is the purpose of the `LoadCache` method?\n- The `LoadCache` method is used to load cached data for a user map from a file. It checks if the cache file exists and returns `true` if it does, indicating that the cache was successfully loaded.\n\n3. What is the purpose of the `Save` method?\n- The `Save` method is used to save the `UserMapInfo` data to a cache file. It writes the slot, alias, brick count, last modified date, and thumbnail (if it exists) to the file."
}