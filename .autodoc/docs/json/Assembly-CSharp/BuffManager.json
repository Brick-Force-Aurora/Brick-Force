{
  "fileName": "BuffManager.cs",
  "filePath": "Assembly-CSharp\\BuffManager.cs",
  "url": "https://github.com/TieHaxJan/Brick-Force/Assembly-CSharp\\BuffManager.cs",
  "summary": "The `BuffManager` class is responsible for managing buffs in the Brick-Force project. Buffs are temporary enhancements or bonuses that can be applied to players or objects in the game. This class provides methods for adding, retrieving, and manipulating buffs.\n\nThe class contains several constants, such as `BF_NON_NMCAFE_USER` and `BF_NMCAFE_USER_CHECKIN`, which are used as identifiers for different types of buffs.\n\nThe class also contains an array of `BuffDesc` objects, which represent the descriptions of each buff, and an array of `Texture2D` objects, which represent the icons associated with each buff.\n\nThe `BuffManager` class is implemented as a singleton, meaning that there can only be one instance of it in the game. The `Instance` property provides access to this instance.\n\nThe class provides methods for retrieving the icons associated with specific buffs, such as `getPointUpTex()`, `getXpUpTex()`, and `getLuckUpTex()`. These methods return the corresponding `Texture2D` object from the `icons` array.\n\nThe `Add()` method is used to add a new buff to the manager. It takes an index, a name, and a `TBuff` object as parameters. The method checks if the buff already exists in the manager's dictionaries (`dic` and `dicByName`) and adds it if it doesn't.\n\nThe `ToWhyArray()` method is used to convert a bitmask into an array of `BuffDesc` objects. It takes a bitmask as a parameter and iterates over each bit, checking if it is set in the bitmask. If the bit is set and certain conditions are met, the corresponding `BuffDesc` object is added to a list, which is then converted to an array and returned.\n\nThe `Get()` methods are used to retrieve a `TBuff` object by its index or name from the manager's dictionaries.\n\nThe `Awake()` method is called when the `BuffManager` object is created. It initializes the dictionaries and ensures that the object is not destroyed when a new scene is loaded.\n\nThe `Load()` method is used to load the buffs from a file. It checks if the game is running in a web player or a local file system and calls the appropriate method to load the buffs.\n\nThe `LoadFromLocalFileSystem()` method loads the buffs from a local file system. It checks if the necessary directories and files exist, and if not, it logs an error. It then uses a `CSVLoader` object to load the buffs from a CSV file and calls the `Parse()` method to parse the loaded data.\n\nThe `LoadAllFromWWW()` method loads the buffs from a web server. It creates a `WWW` object to download the buffs file, reads the downloaded data using a `BinaryReader`, and uses a `CSVLoader` object to parse the data.\n\nThe `Parse()` method is called to parse the loaded data. It iterates over each row in the CSV file and reads the values for each column. It then creates a new `TBuff` object with the parsed values and adds it to the manager using the `Add()` method.\n\nThe `IsChannelBuff()` method checks if there are any buffs applied to the current game channel. It checks if the experience bonus or the force points bonus of the channel is non-zero and returns `true` if either of them is non-zero.\n\nThe `GetBuffDesc()` method retrieves the `BuffDesc` object for a specific buff type. It takes a `BuffDesc.WHY` enum value as a parameter and returns the corresponding `BuffDesc` object from the `why` array.\n\nThe `IsPCBangBuff()` method checks if the current game is a PC bang buff. It checks if the `netCafeCode` variable is equal to 1 and returns `true` if it is.\n\nOverall, the `BuffManager` class provides functionality for managing buffs in the Brick-Force project. It allows for adding, retrieving, and manipulating buffs, as well as loading them from a file or a web server.",
  "questions": "**Question 1:** What is the purpose of the `BuffManager` class?\n- The `BuffManager` class is responsible for managing buffs in the game.\n\n**Question 2:** How are buffs loaded in the game?\n- Buffs can be loaded either from a local file system or from a web server, depending on the platform.\n\n**Question 3:** What is the significance of the `isLoaded` variable?\n- The `isLoaded` variable indicates whether the buffs have been successfully loaded and are ready to be used in the game."
}