{
  "fileName": "PrjGrenade.cs",
  "filePath": "Assembly-CSharp\\PrjGrenade.cs",
  "url": "https://github.com/TieHaxJan/Brick-Force/Assembly-CSharp\\PrjGrenade.cs",
  "summary": "The code provided is a class called `PrjGrenade` that extends the `Projectile` class. This class represents a grenade projectile in the game. \n\nThe `PrjGrenade` class has several private fields including `radius`, `atkPow`, `rigidity`, `weaponBy`, `weaponByForChild`, `durability`, and `durabilityMax`. These fields store various properties of the grenade such as its explosion radius, attack power, rigidity, and durability.\n\nThe class also has several public properties that allow setting the values of these fields. These properties include `Radius`, `AtkPow`, `Rigidity`, `WeaponBy`, `WeaponByForChild`, `Durability`, and `DurabilityMax`. These properties provide a way to set the values of the private fields from outside the class.\n\nThe class has several private methods that perform different checks and actions related to the grenade. \n\nThe `CalcPowFrom` method calculates the attack power of the grenade based on its distance from a given position. It uses the `atkPow` field and the `radius` field to calculate the attack power.\n\nThe `CheckMyself` method checks if the grenade has hit the player who threw it. It uses a layer mask to determine which game objects to check for collision with the grenade. It then checks if the distance between the player and the grenade is less than the grenade's radius. If it is, it calculates the damage to apply to the player based on the distance and the attack power of the grenade.\n\nThe `CheckBoxmen` method checks if the grenade has hit any enemy players or brick objects. It uses the `ExplosionUtil` class to check for collision with enemy players and brick objects within the grenade's radius. It then calculates the damage to apply to the enemy players and brick objects based on the distance and the attack power of the grenade.\n\nThe `CheckMonster` method checks if the grenade has hit any enemy monsters. It uses the `ExplosionUtil` class to check for collision with enemy monsters within the grenade's radius. It then calculates the damage to apply to the enemy monsters based on the distance and the attack power of the grenade.\n\nThe `CheckDestructibles` method checks if the grenade has hit any destructible brick objects. It uses the `ExplosionUtil` class to check for collision with destructible brick objects within the grenade's radius. It then applies damage to the destructible brick objects based on the distance and the attack power of the grenade. If the hit point of a destructible brick object reaches zero, it sends a network request to destroy the brick object.\n\nThe `Start` method is called when the grenade is instantiated. It checks if a certain build option is enabled and if so, it replaces the main texture of the grenade's mesh renderer with a texture from a manager.\n\nThe `Kaboom` method is called when the grenade detonates. It instantiates an explosion effect at the grenade's position. It then calls the various check methods to apply damage to players, monsters, and destructible brick objects within the grenade's radius. Finally, it destroys the grenade game object.\n\nThe `Update` method is called every frame. It checks if the grenade is still in motion and if enough time has passed for the grenade to detonate. If so, it calls the `Kaboom` method. Otherwise, it sends a network request to update the position and rotation of the grenade.\n\nThe `FixedUpdate` method is called at a fixed interval. It adds torque to the grenade's rigidbody to make it spin.\n\nIn summary, this code represents a grenade projectile in the game. It handles the detonation of the grenade, calculates the damage to apply to players, monsters, and destructible brick objects within the grenade's radius, and updates the position and rotation of the grenade. This code is likely used in the larger project to handle the gameplay mechanics of grenades and their interactions with other game objects.",
  "questions": "1. What is the purpose of the `CheckMyself()` method?\n- The `CheckMyself()` method is responsible for checking if the projectile has hit the player character and applying damage to the player if necessary.\n\n2. What does the `Kaboom()` method do?\n- The `Kaboom()` method is responsible for triggering the explosion effect of the projectile, as well as checking for collisions with other objects such as enemies, destructible objects, and the player character.\n\n3. What is the significance of the `Durability` and `DurabilityMax` properties?\n- The `Durability` and `DurabilityMax` properties are used to track the current and maximum durability of the projectile. They are used in calculations for applying damage to objects and players."
}