{
  "folderName": "GUI",
  "folderPath": ".autodoc\\docs\\json\\Assembly-CSharp\\_Emulator\\GUI",
  "url": "https://github.com/TieHaxJan/Brick-Force/.autodoc\\docs\\json\\Assembly-CSharp\\_Emulator\\GUI",
  "files": [
    {
      "fileName": "ConfigGUI.cs",
      "filePath": "Assembly-CSharp\\_Emulator\\GUI\\ConfigGUI.cs",
      "url": "https://github.com/TieHaxJan/Brick-Force/Assembly-CSharp\\_Emulator\\GUI\\ConfigGUI.cs",
      "summary": "The code provided is a part of the Brick-Force project and is located in the `ConfigGUI` class. This class is responsible for creating and managing a graphical user interface (GUI) window that allows the user to configure various settings for the game.\n\nThe `ConfigGUI` class extends the `MonoBehaviour` class from the Unity engine, which means it can be attached to a game object in the scene and respond to events such as `Update` and `OnGUI`.\n\nThe `ConfigGUI` class has a few member variables. The `configGUIRect` variable is a `Rect` object that defines the position and size of the GUI window. The `hidden` variable is a boolean flag that determines whether the GUI window should be hidden or shown.\n\nThe `Update` method is called every frame and checks if the F7 key is pressed. If it is, the `hidden` flag is toggled, which hides or shows the GUI window accordingly. \n\nThe `OnGUI` method is called whenever the GUI needs to be rendered. If the `hidden` flag is false, the `GUILayout.Window` method is called to create a GUI window with the title \"Config\" and the ID 104. The `ConfigGUIWindow` method is then called to draw the contents of the GUI window.\n\nThe `ConfigGUIWindow` method contains various GUI elements such as buttons, labels, sliders, and toggle switches. These elements allow the user to save and load configurations, adjust the axis ratio and crosshair hue, and toggle various settings related to client connections and debugging.\n\nFor example, the code `Config.instance.axisRatio = GUILayout.HorizontalSlider(Config.instance.axisRatio, 1f, 2.25f);` creates a horizontal slider that allows the user to adjust the `axisRatio` property of the `Config` class. The current value of `axisRatio` is displayed as a label next to the slider.\n\nOverall, the `ConfigGUI` class provides a user-friendly way for players to customize their game settings. It is an important component of the larger Brick-Force project as it allows players to tailor their gameplay experience to their preferences.",
      "questions": "1. What is the purpose of the `ConfigGUI` class?\n- The `ConfigGUI` class is responsible for handling the GUI window for configuring various settings.\n\n2. What does the `Update` method do?\n- The `Update` method checks if the F7 key is pressed and toggles the `hidden` variable accordingly. It also applies the axis ratio and crosshair hue settings from the `Config` instance.\n\n3. What happens when the \"Save\" button is clicked in the GUI window?\n- When the \"Save\" button is clicked, the `SaveConfigToDisk` method of the `Config` instance is called to save the configuration to disk."
    },
    {
      "fileName": "DebugConsole.cs",
      "filePath": "Assembly-CSharp\\_Emulator\\GUI\\DebugConsole.cs",
      "url": "https://github.com/TieHaxJan/Brick-Force/Assembly-CSharp\\_Emulator\\GUI\\DebugConsole.cs",
      "summary": "The code provided is for a DebugConsole class in the Brick-Force project. This class is responsible for displaying debug logs and messages in a console window within the game. \n\nThe DebugConsole class is a MonoBehaviour, meaning it can be attached to a GameObject in the Unity scene and will be updated and rendered automatically. It contains several variables and methods that control the behavior and appearance of the console.\n\nThe class defines a struct called Log, which represents a single log message. Each log message has a message string, a stackTrace string, and a LogType enum value. The LogType enum represents the type of log message, such as Log, Warning, Error, etc.\n\nThe class also defines a list of Log objects called logs, which stores all the log messages that have been received. There is a scrollPosition variable that keeps track of the current scroll position of the console window, and hidden and collapse variables that control the visibility and behavior of the console.\n\nThe OnEnable and OnDisable methods are Unity lifecycle methods that register and unregister a log callback function using the Application class. This callback function, HandleLog, is called whenever a new log message is received. The HandleLog function creates a new Log object with the message, stackTrace, and type parameters, and adds it to the logs list.\n\nThe Update method checks for user input to toggle the visibility of the console and to scroll through the log messages.\n\nThe OnGUI method is another Unity lifecycle method that is responsible for rendering the console window. If the console is not hidden, it uses the GUILayout.Window function to create a window with a unique ID and a title of \"Console\". Inside the window, it uses GUILayout.BeginScrollView and GUILayout.EndScrollView to create a scrollable area for the log messages. It then iterates over the logs list and displays each log message using GUILayout.Label. If the collapse variable is true, it skips displaying log messages that are the same as the previous one, to avoid repetition. Finally, it renders buttons for clearing the logs and toggling the collapse behavior.\n\nOverall, this DebugConsole class provides a way to display and manage debug logs and messages in a console window within the game. It can be used during development and testing to track and troubleshoot issues.",
      "questions": "1. What is the purpose of the `DebugConsole` class?\n- The `DebugConsole` class is responsible for displaying logs and stack traces in a console window in the Unity game engine.\n\n2. What is the significance of the `toggleKey` variable?\n- The `toggleKey` variable determines the key that can be pressed to show or hide the console window.\n\n3. How are log messages and stack traces stored and displayed in the console window?\n- Log messages and stack traces are stored in a list of `Log` structs and are displayed using the `GUILayout.Label` method."
    },
    {
      "fileName": "InventoryGUI.cs",
      "filePath": "Assembly-CSharp\\_Emulator\\GUI\\InventoryGUI.cs",
      "url": "https://github.com/TieHaxJan/Brick-Force/Assembly-CSharp\\_Emulator\\GUI\\InventoryGUI.cs",
      "summary": "The code provided is a part of the Brick-Force project and is located in the `InventoryGUI` class. This class is responsible for displaying and managing the inventory GUI (Graphical User Interface) in the game.\n\nThe `InventoryGUI` class extends the `MonoBehaviour` class from the Unity engine, which allows it to interact with the game objects and events. It contains several private variables, such as `hidden`, `ranGUI`, `sortedItems`, and various `Rect` objects, which define the positions and sizes of GUI elements.\n\nThe `FitToScreen` method is responsible for adjusting the size of the GUI elements based on the screen size. It is called whenever the screen size changes.\n\nThe `Update` method checks if the F5 key is pressed and toggles the `hidden` variable accordingly. This allows the player to show or hide the inventory GUI by pressing the F5 key.\n\nThe `OnGUI` method is called every frame to draw the inventory GUI. It first checks if the inventory is available and the client is connected. If so, it proceeds to draw the GUI elements, such as windows, buttons, and text fields, using the Unity GUI functions.\n\nThe `IconGUIWindow` method is responsible for drawing the icons of the items in the inventory. It uses a scroll view to display a list of icons, which can be sorted and filtered based on the `sortText` variable. The icons can be clicked to add the corresponding item to the inventory.\n\nThe `InventoryGUIWindow` method is responsible for drawing the items in the inventory. It uses a scroll view to display a grid of item icons. The icons can be clicked to equip or unequip the corresponding item.\n\nOverall, this code provides the functionality to display and interact with the inventory GUI in the game. It allows the player to view, sort, and manage their inventory items. The code also includes methods to update, save, and load the inventory data.",
      "questions": "1. What is the purpose of the `FitToScreen()` method and when is it called?\n- The `FitToScreen()` method adjusts the size and position of GUI windows to fit the screen. It is called in the `OnGUI()` method.\n2. What is the significance of the `hidden` variable and how is it used?\n- The `hidden` variable is a boolean that determines whether the GUI windows should be displayed or not. It is used in the `OnGUI()` method to conditionally skip rendering the GUI if it is set to true.\n3. What is the purpose of the `ranGUI` variable and how is it used?\n- The `ranGUI` variable is a boolean that tracks whether the GUI has been rendered at least once. It is used in the `OnGUI()` method to ensure that certain operations are only performed once, such as sorting the items dictionary."
    },
    {
      "fileName": "MainGUI.cs",
      "filePath": "Assembly-CSharp\\_Emulator\\GUI\\MainGUI.cs",
      "url": "https://github.com/TieHaxJan/Brick-Force/Assembly-CSharp\\_Emulator\\GUI\\MainGUI.cs",
      "summary": "The code provided is a part of the Brick-Force project and is located in the MainGUI.cs file. This code is responsible for managing the graphical user interface (GUI) of the game. It allows the player to interact with various setup and host options.\n\nThe MainGUI class is a MonoBehaviour class, which means it can be attached to a GameObject in the Unity game engine. It contains several public and private variables that control the visibility and position of GUI windows, as well as a custom message string.\n\nThe Update() method is called every frame and checks for specific key presses. If the F6 key is pressed, it toggles the visibility of the setup GUI window. If the F4 key is pressed, it toggles the visibility of the host GUI window. Additionally, the method calls the HandleReliableKillLog() method of the ClientExtension class.\n\nThe OnGUI() method is also called every frame and is responsible for rendering the GUI elements on the screen. If the setup GUI window is not hidden, it calls the GUILayout.Window() method to create a window with the title \"Setup\" and the specified dimensions. Inside the window, it displays a label for the host IP and a text field for the user to enter the IP address. It also provides two buttons: \"Host\" and \"Join\". Clicking the \"Host\" button hides the host GUI window, sets up the server using the ServerEmulator class, and loads the server using the ClientExtension class. Clicking the \"Join\" button also hides the host GUI window and loads the server.\n\nIf the host GUI window is not hidden and the server has been created, the method creates a host GUI window using the GUILayout.Window() method. Inside the window, it provides several buttons for different actions such as \"Shutdown\", \"Reset\", \"Clear Buffers\", and \"Send Custom Message\". It also displays a label for the connected clients and creates a button for each client in the ServerEmulator's clientList. Clicking a client button sends a disconnect message to the server.\n\nOverall, this code provides a user interface for setting up and managing a server in the Brick-Force game. It allows the player to host or join a server, perform server-related actions, and interact with connected clients.",
      "questions": "1. What is the purpose of the `Update()` method?\n- The `Update()` method is used to handle input from the user and perform actions based on that input.\n\n2. What is the purpose of the `OnGUI()` method?\n- The `OnGUI()` method is responsible for rendering the graphical user interface (GUI) elements on the screen.\n\n3. What does the `SendDisconnect()` method do?\n- The `SendDisconnect()` method is used to send a disconnect message to a specific client in the `clientList` of the `ServerEmulator` instance."
    }
  ],
  "folders": [],
  "summary": "The `GUI` folder in the `Assembly-CSharp\\_Emulator` directory of the Brick-Force project contains four C# files: `ConfigGUI.cs`, `DebugConsole.cs`, `InventoryGUI.cs`, and `MainGUI.cs`. Each file is responsible for a specific aspect of the game's graphical user interface (GUI).\n\n`ConfigGUI.cs` manages a GUI window for configuring game settings. It extends Unity's `MonoBehaviour` class, allowing it to be attached to a game object and respond to events. The class has methods for updating the GUI and rendering it, as well as a method for drawing the contents of the GUI window. For example, it uses `GUILayout.HorizontalSlider` to create a slider for adjusting the `axisRatio` property of the `Config` class.\n\n`DebugConsole.cs` displays debug logs and messages in a console window within the game. It also extends `MonoBehaviour` and defines a `Log` struct for log messages. The class registers a log callback function that is called whenever a new log message is received. The `OnGUI` method renders the console window and displays each log message.\n\n`InventoryGUI.cs` displays and manages the inventory GUI in the game. It adjusts the size of the GUI elements based on the screen size and allows the player to show or hide the inventory GUI. The class has methods for drawing the icons of the items in the inventory and the items themselves. It also includes methods for updating, saving, and loading the inventory data.\n\n`MainGUI.cs` manages the main GUI of the game, allowing the player to interact with various setup and host options. It checks for specific key presses to toggle the visibility of the setup and host GUI windows. The class creates a window for entering the host IP and provides buttons for hosting or joining a server. It also creates a host GUI window with buttons for different server-related actions.\n\nThese classes work together to provide a comprehensive and user-friendly interface for the Brick-Force game. They allow the player to configure settings, view debug logs, manage their inventory, and set up and manage a server.",
  "questions": ""
}