{
  "fileName": "PlayerInfoMain.cs",
  "filePath": "Assembly-CSharp\\PlayerInfoMain.cs",
  "url": "https://github.com/TieHaxJan/Brick-Force/Assembly-CSharp\\PlayerInfoMain.cs",
  "summary": "The code provided is a part of the Brick-Force project and is contained within the `PlayerInfoMain` class. This class is responsible for managing the player's information, specifically their nickname. \n\nThe code begins by declaring several variables to store the GUI elements' positions and properties. These variables include `guiDepth`, `crdGuide`, `crdNickname`, and `crdOk`. The `guiDepth` variable determines the layer of the GUI elements, while the `crdGuide`, `crdNickname`, and `crdOk` variables define the positions and sizes of the guide, nickname, and OK button GUI elements, respectively.\n\nThe `maxNickname` and `minNickname` variables store the maximum and minimum lengths of the player's nickname, respectively. The `nickName` variable is used to store the player's entered nickname.\n\nThe `areYouSure` variable is an instance of the `AreYouSure` class, which is used to display a confirmation dialog. The `IsCreating` property is a setter that sets the value of the `Yes` property of the `areYouSure` instance.\n\nThe `Start` method initializes the `areYouSure` variable to null.\n\nThe `CheckInput` method is responsible for validating the player's entered nickname. It trims any leading or trailing whitespace from the nickname and checks its length. If the nickname is empty or shorter than the minimum length, an error message is displayed using the `MessageBoxMgr` class. Additionally, the method checks if the nickname contains any bad words using the `WordFilter` class. If a bad word is detected, an error message is displayed.\n\nThe `OnGUI` method is called to render the GUI elements on the screen. It sets the GUI depth, skin, and enables the GUI elements if there are no modal dialogs displayed. It then renders a GUI box that covers the entire screen. The GUI elements are rendered within a group that is centered on the screen. The guide text is displayed using the `GUI.Label` method, and the player's nickname is entered using the `GUI.TextField` method. The entered nickname is then processed to remove any special characters if the game is built with the Axeso5 option enabled. Finally, when the OK button is clicked, the `CheckInput` method is called to validate the nickname, and if the validation passes, a confirmation dialog is displayed using the `DialogManager` class.\n\nThe `Update` method is empty and does not contain any code.\n\nThe `RemoveSpecialCharacters` method is a helper method that removes any special characters from the input string. It iterates over each character in the input string and checks if it is a digit or a letter. If it is, the character is appended to a `StringBuilder`. The method then returns the resulting string with the special characters removed.\n\nOverall, this code manages the player's nickname input and validation, and displays the necessary GUI elements to allow the player to enter their nickname. It also handles the removal of special characters from the nickname if the game is built with the Axeso5 option enabled.",
  "questions": "1. What is the purpose of the `PlayerInfoMain` class?\n- The `PlayerInfoMain` class is responsible for handling player information and input related to creating a character.\n\n2. What is the significance of the `crdGuide`, `crdNickname`, and `crdOk` variables?\n- These variables represent the coordinates and dimensions of GUI elements used for displaying a guide, entering a nickname, and confirming the input, respectively.\n\n3. What is the purpose of the `CheckInput` method?\n- The `CheckInput` method validates the entered nickname and displays error messages if the input is empty, too short, or contains a bad word."
}